<launch>
  <arg name="world_file"  value="$(find color_selector)/worlds/maze.world"/>

  <arg name="base"      value="$(optenv TURTLEBOT_BASE kobuki)"/> <!-- create, roomba -->
  <arg name="battery"   value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>  <!-- /proc/acpi/battery/BAT0 --> 
  <arg name="gui" default="true"/>
  <arg name="stacks"    value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons --> 
  <arg name="3d_sensor" value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro --> 

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="use_sim_time" value="true"/>
    <arg name="debug" value="false"/>
    <arg name="gui" value="$(arg gui)" />
    <arg name="world_name" value="$(arg world_file)"/>
  </include>
  
  <include file="$(find color_selector)/launch/spawn.launch">
    <arg name="base" value="$(arg base)"/>
    <arg name="stacks" value="$(arg stacks)"/>
    <arg name="3d_sensor" value="$(arg 3d_sensor)"/>
  </include>
  
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0" />
  </node>
  
  <!-- Fake laser -->
  <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="/camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
  </node>

  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find color_selector)/rviz/color_selector.rviz" />
  <include file="$(find color_selector)/launch/gmapping.launch"/>
  <include file="$(find turtlebot_navigation)/launch/includes/amcl.launch.xml"/>

  <include file="$(find turtlebot_navigation)/launch/includes/move_base.launch.xml"/>
  <!--
  THE FOLLOWING PART OF THE LAUNCH FILE IS TAKEN FROM
  3D IMAGE PROCESSING PIPELINE SAMPLE FILES WITH MODIFICATIONS.
  https://gist.github.com/bhaskara/2400165
  -->
  <!--
  To distinguish between the cases where the rgb image is
  1280x1024 versus 640x480.  This affects the pipeline.
  -->
  <arg name="high_res_rgb" default="true"/>
  <arg name="cloud_input_ns" value="camera/rgb_downsampled"
       if="$(arg high_res_rgb)"/>
  <arg name="cloud_input_ns" value="camera/rgb" unless="$(arg high_res_rgb)"/>

  <!-- Nodelet manager for this pipeline -->
  <node pkg="nodelet" type="nodelet" args="manager"
        name="record_player_manager" output="screen"/>

  <!-- Debayer and undistort the rgb image
       TODO: this should be split into nodelets -->
  <node 
    pkg="image_proc" 
    type="image_proc" 
    name="ip_node1" 
    ns="camera/rgb"
    />

  
  <!-- The depth image is already rectified and registered
       to the camera optical frame, but stored in mm; convert it
       to meters -->
  <node pkg="nodelet" type="nodelet" name="metric_rect" 
        args="load depth_image_proc/convert_metric record_player_manager --no-bond">
    <remap from="image_raw" to="camera/depth/image_raw"/>
    <remap from="image" to="camera/depth/image"/>
  </node>

  <!-- Downsample and crop rgb image before converting to cloud, if it's high res -->
  <node pkg="nodelet" type="nodelet" name="downsample_rgb"
        args="load image_proc/crop_decimate record_player_manager --no-bond"
        if="$(arg high_res_rgb)">
    <param name="decimation_x" value="2"/>
    <param name="decimation_y" value="2"/>
    <param name="width" value="1280"/>
    <param name="height" value="960"/>
    <remap from="camera" to="camera/rgb"/>
    <remap from="camera_out" to="$(arg cloud_input_ns)"/>
    <remap from="camera/rgb/image_raw" to="camera/rgb/image_rect_color"/>
    <remap from="$(arg cloud_input_ns)/image_raw" to="$(arg cloud_input_ns)/image_rect_color"/>
  </node>

  <!-- Convert it into a point cloud -->
  <node pkg="nodelet" type="nodelet" name="cloudify"
        args="load depth_image_proc/point_cloud_xyzrgb record_player_manager --no-bond">
    <remap from="depth_registered/image_rect" to="camera/depth/image"/>
    <remap from="depth_registered/points" to="camera/depth_registered/points"/>
    <remap from="rgb/image_rect_color" to="$(arg cloud_input_ns)/image_rect_color"/>
    <remap from="rgb/camera_info" to="$(arg cloud_input_ns)/camera_info"/>
  </node>
</launch>
